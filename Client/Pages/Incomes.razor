@page "/incomes"
@using BlazorFinance.Client.Pages.Components
@using BlazorFinance.Shared.Entities
@using BlazorFinance.Shared.Types
@using System.Net
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<ContentCard>
    <h3>Income</h3>
    <DataGrid TItem="Income"
              Data="@_income"
              RowInserted="@OnRowInserted"
              RowUpdated="@OnRowUpdated"
              RowRemoving="@OnRowRemoving"
              RowRemoved="@OnRowRemoved"
              Editable="true"
              ShowPager="true"
              Style="color: white;"
              Responsive>
        <DataGridColumns>
            <DataGridCommandColumn>
                <NewCommandTemplate>
                    <button type="button" class="btn-admin" title="Add" onclick="@context.Clicked">
                        <i class="oi bi-plus-lg" style="font-size: 1.2rem;"></i>
                    </button>
                </NewCommandTemplate>
                <EditCommandTemplate>
                    <button type="button" class="btn-admin" title="Edit" onclick="@context.Clicked">
                        <i class="oi bi-pencil" style="font-size: 1.2rem;"></i>
                    </button>
                </EditCommandTemplate>
                <DeleteCommandTemplate>
                    <button type="button" class="btn-admin" title="Delete" onclick="@context.Clicked">
                        <i class="oi bi-trash" style="font-size: 1.2rem;"></i>
                    </button>
                </DeleteCommandTemplate>
            </DataGridCommandColumn>
            <DataGridColumn Field="@nameof(Income.Id)" Caption="#" Sortable="false" />
            <DataGridSelectColumn Field="@nameof(Income.Type)"
                                  Caption="Type"
                                  Data="Enum.GetValues(typeof(IncomeType)).Cast<object>()"
                                  ValueField="(x) => (IncomeType)x"
                                  TextField="(x) => Enum.GetName(typeof(IncomeType), (IncomeType)x)"
                                  Editable="true">
            </DataGridSelectColumn>
            <DataGridSelectColumn Field="@nameof(Income.Institution)"
                                  Caption="Received From Institution"
                                  Editable="true">
                <DisplayTemplate>
                    @if (_institutions != null)
                    {
                        @_institutions.FirstOrDefault(x => x.Id == (context as Income).Institution?.Id)?.Name
                        ;
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <Select TValue="int"
                            SelectedValue="@((int)((Institution)context.CellValue).Id)"
                            SelectedValueChanged="@( v => context.CellValue = _institutions.FirstOrDefault(x => x.Id == v))">
                        <SelectItem TValue="int" Value="0">&ltNone&gt</SelectItem>
                        @if (_institutions != null)
                        {
                            foreach (var institution in _institutions)
                            {
                                <SelectItem TValue="int" Value="@(institution.Id)">@(institution.Name)</SelectItem>
                            }
                        }
                    </Select>
                </EditTemplate>
            </DataGridSelectColumn>
            <DataGridSelectColumn Field="@nameof(Income.Account)"
                                  Caption="Deposit To Account"
                                  Editable="true">
                <DisplayTemplate>
                    @if (_accounts != null)
                    {
                        @_accounts.FirstOrDefault(x => x.Id == (context as Income).Account?.Id)?.Name
                        ;
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <Select TValue="int"
                            SelectedValue="@((int)((Account)context.CellValue).Id)"
                            SelectedValueChanged="@( v => context.CellValue = _accounts.FirstOrDefault(x => x.Id == v))">
                        <SelectItem TValue="int" Value="0">&ltNone&gt</SelectItem>
                        @if (_accounts != null)
                        {
                            foreach (var account in _accounts)
                            {
                                <SelectItem TValue="int" Value="@(account.Id)">@(account.Name)</SelectItem>
                            }
                        }
                    </Select>
                </EditTemplate>
            </DataGridSelectColumn>
            <DataGridSelectColumn Field="@nameof(Income.Asset)"
                                  Caption="Invest In Asset"
                                  Editable="true">
                <DisplayTemplate>
                    @if (_assets != null)
                    {
                        @_assets.FirstOrDefault(x => x.Id == (context as Income).Asset?.Id)?.Description
                        ;
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <Select TValue="int"
                            SelectedValue="@((int)((Asset)context.CellValue).Id)"
                            SelectedValueChanged="@( v => context.CellValue = _assets.FirstOrDefault(x => x.Id == v))">
                        <SelectItem TValue="int" Value="0">&ltNone&gt</SelectItem>
                        @if (_assets != null)
                        {
                            foreach (var asset in _assets)
                            {
                                <SelectItem TValue="int" Value="@(asset.Id)">@(asset.Description)</SelectItem>
                            }
                        }
                    </Select>
                </EditTemplate>
            </DataGridSelectColumn>
            <DataGridColumn Field="@nameof(Income.Description)" Caption="Description" Editable />
             <DataGridColumn Field="@nameof(Income.Amount)"
                             Caption="Amount"
                             DisplayFormat="{0:C}"
                             DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("en-US")"
                                    Editable>
                <EditTemplate>
                    <NumericEdit TValue="decimal"
                                 Value="@((decimal)context.CellValue)"
                                 ValueChanged="@( v => context.CellValue = v)" />
                </EditTemplate>
            </DataGridColumn>
            <DataGridSelectColumn Field="@nameof(Income.Frequency)"
                                  Caption="Frequency"
                                  Data="Enum.GetValues(typeof(Frequency)).Cast<object>()"
                                  ValueField="(x) => (Frequency)x"
                                  TextField="(x) => Enum.GetName(typeof(Frequency), (Frequency)x)"
                                  Editable="true">
            </DataGridSelectColumn>
            <DataGridColumn Field="@nameof(Income.StartingDate)" Caption="Starting Date" Editable />
             <DataGridColumn Field="@nameof(Income.EndingDate)" Caption="Ending Date" Editable />
         </DataGridColumns>
     </DataGrid>
</ContentCard>

 @code {
    // Primary Entity
    private List<Income> _income = new List<Income>();
    // Related Entitites
    private List<Account> _accounts = new List<Account>();
    private List<Asset> _assets = new List<Asset>();
    private List<Institution> _institutions = new List<Institution>();

    protected override async Task OnInitializedAsync()
    {
        // Primary Entity
        _income = await Http.GetFromJsonAsync<List<Income>>("income/read") ?? new List<Income>();
        // Related Entitites
        _accounts = await Http.GetFromJsonAsync<List<Account>>("account/read") ?? new List<Account>();
        _assets = await Http.GetFromJsonAsync<List<Asset>>("asset/read") ?? new List<Asset>();
        _institutions = await Http.GetFromJsonAsync<List<Institution>>("institution/read") ?? new List<Institution>();
    }

    private async Task OnRowInserted(SavedRowItem<Income, Dictionary<string, object>> e)
    {
        HttpResponseMessage? response = await Http.PostAsJsonAsync("income/create", e.NewItem);

        if (response.IsSuccessStatusCode){
            Income? income = await response.Content.ReadFromJsonAsync<Income>();
            if (income != null){
                e.OldItem.Id = income.Id;
            }

            ToastService.ShowToast(ToastLevel.Success, $"Income Created: Id {income?.Id}");
        }
        else
            ToastService.ShowToast(ToastLevel.Error, $"Income Was Not Created. Response Code: {response.StatusCode}");
    }

    private async Task OnRowUpdated(SavedRowItem<Income, Dictionary<string, object>> e)
    {
        HttpResponseMessage? response = await Http.PutAsJsonAsync($"income/update/{e.NewItem.Id}", e.NewItem,
            new JsonSerializerOptions
                {
                    DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
                }
        );

        if (response.IsSuccessStatusCode)
            ToastService.ShowToast(ToastLevel.Success, $"Income Id {e.NewItem.Id} Updated");
        else
            ToastService.ShowToast(ToastLevel.Error, $"Income Id {e.NewItem.Id} Was Not Updated. Response Code: {response.StatusCode}");
    }

    private async Task OnRowRemoving(CancellableRowChange<Income> e)
    {
        // Dialog returns true when confirming delete prompt, false when canceled (use negation to sync with args)
        e.Cancel = !await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the Income?");
    }

    private async Task OnRowRemoved(Income income)
    {
        HttpResponseMessage? response = await Http.DeleteAsync($"income/delete/{income.Id}");

        if (response.IsSuccessStatusCode)
            ToastService.ShowToast(ToastLevel.Success, $"Income Id {income.Id} Deleted");
        else
            ToastService.ShowToast(ToastLevel.Error, $"Income Id {income.Id} Was Not Deleted. Response Code: {response.StatusCode}");
    }
}


@page "/incomes"
@using BlazorFinance.Client.Pages.Components
@using BlazorFinance.Shared.Entities
@using BlazorFinance.Shared.Helpers
@using System.Net
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h3>Income</h3>

<DataGrid TItem="Income"
          Data="@_income"
          RowInserted="@OnRowInserted"
          RowUpdated="@OnRowUpdated"
          RowRemoving="@OnRowRemoving"
          RowRemoved="@OnRowRemoved"
          Editable="true"
          ShowPager="true"
          Responsive>
    <DataGridColumns>
        <DataGridCommandColumn>
            <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Warning" Clicked="@context.Clicked">Edit</Button>
            </EditCommandTemplate>
            <DeleteCommandTemplate>
                <Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
            </DeleteCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn Field="@nameof(Income.Id)" Caption="#" Sortable="false" />
        <DataGridSelectColumn 
            Field="@nameof(Income.Account)"
            Caption="Account"
            Editable="true">
            <DisplayTemplate>
                @if (_accounts != null){
                    @_accounts.FirstOrDefault(x => x.Id == (context as Income).Account?.Id)?.Name;
                }
            </DisplayTemplate>
            <EditTemplate>
                <Select TValue="int"
                        SelectedValue="@((int)((Account)context.CellValue).Id)"
                        SelectedValueChanged="@( v => context.CellValue = _accounts.FirstOrDefault(x => x.Id == v))">
                    <SelectItem TValue="int" Value="0">&ltNone&gt</SelectItem>
                    @if (_accounts != null){
                        foreach (var account in _accounts){
                            <SelectItem TValue="int" Value="@(account.Id)">@(account.Name)</SelectItem>
                        }
                    }
                </Select>
            </EditTemplate>
        </DataGridSelectColumn>
        <DataGridColumn Field="@nameof(Income.Description)" Caption="Description" Editable />
        <DataGridColumn 
            Field="@nameof(Expense.Amount)"
            Caption="Amount"
            DisplayFormat="{0:C}"
            DisplayFormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("en-US")"
            Editable
        >
            <EditTemplate>
                <NumericEdit 
                    TValue="decimal"
                    Value="@((decimal)context.CellValue)"
                    ValueChanged="@( v => context.CellValue = v)" />
            </EditTemplate>
        </DataGridColumn>
        <DataGridSelectColumn 
            Field="@nameof(Income.Frequency)"
            Caption="Frequency"
            Data="Enum.GetValues(typeof(Frequency)).Cast<object>()"
            ValueField="(x) => (Frequency)x"
            TextField="(x) => Enum.GetName(typeof(Frequency), (Frequency)x)"
            Editable="true">
        </DataGridSelectColumn>
        <DataGridColumn Field="@nameof(Income.StartingDate)" Caption="Starting Date" Editable />
        <DataGridColumn Field="@nameof(Income.EndingDate)" Caption="Ending Date" Editable />
     </DataGridColumns>
 </DataGrid>

 @code {
    private List<Account> _accounts = new List<Account>();
    private List<Income> _income = new List<Income>();

    protected override async Task OnInitializedAsync()
    {
        _accounts = await Http.GetFromJsonAsync<List<Account>>("account") ?? new List<Account>();
        _income = await Http.GetFromJsonAsync<List<Income>>("income/read") ?? new List<Income>();
    }

    private async Task OnRowInserted(SavedRowItem<Income, Dictionary<string, object>> e)
    {
        HttpResponseMessage? response = await Http.PostAsJsonAsync("income/create", e.NewItem);

        if (response.IsSuccessStatusCode){
            Income? income = await response.Content.ReadFromJsonAsync<Income>();
            if (income != null){
                e.OldItem.Id = income.Id;
            }

            ToastService.ShowToast(ToastLevel.Success, $"Income Created: Id {income?.Id}");
        }
        else
            ToastService.ShowToast(ToastLevel.Error, $"Income Was Not Created. Response Code: {response.StatusCode}");
    }

    private async Task OnRowUpdated(SavedRowItem<Income, Dictionary<string, object>> e)
    {
        HttpResponseMessage? response = await Http.PutAsJsonAsync($"income/update/{e.NewItem.Id}", e.NewItem,
            new JsonSerializerOptions
                {
                    DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
                }
        );

        if (response.IsSuccessStatusCode)
            ToastService.ShowToast(ToastLevel.Success, $"Income Id {e.NewItem.Id} Updated");
        else
            ToastService.ShowToast(ToastLevel.Error, $"Income Id {e.NewItem.Id} Was Not Updated. Response Code: {response.StatusCode}");
    }

    private async Task OnRowRemoving(CancellableRowChange<Income> e)
    {
        // Dialog returns true when confirming delete prompt, false when canceled (use negation to sync with args)
        e.Cancel = !await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the Income?");
    }

    private async Task OnRowRemoved(Income income)
    {
        HttpResponseMessage? response = await Http.DeleteAsync($"income/delete/{income.Id}");

        if (response.IsSuccessStatusCode)
            ToastService.ShowToast(ToastLevel.Success, $"Income Id {income.Id} Deleted");
        else
            ToastService.ShowToast(ToastLevel.Error, $"Income Id {income.Id} Was Not Deleted. Response Code: {response.StatusCode}");
    }
}


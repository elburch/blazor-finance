@page "/projection"
@using BlazorFinance.Client.Helpers
@using BlazorFinance.Client.Types
@using BlazorFinance.Shared.Entities
@using BlazorFinance.Shared.Extensions
@using BlazorFinance.Shared.Types
@using BlazorFinance.Shared.Models
@inject HttpClient Http


<ContentRow>
    <ContentCard>
        <div style="margin-bottom:1rem;"><em>Projection Inputs</em></div>
        <Field>
            <FieldLabel>
                Current Age
            </FieldLabel>
            <FieldBody>
                <NumericEdit TValue="int" @bind-Value="@_model.CurrentAge" Class="projection-item" />
            </FieldBody>
        </Field>
        <Field>
            <FieldLabel>
                Expiration Age
            </FieldLabel>
            <FieldBody>
                <NumericEdit TValue="int" @bind-Value="@_model.ExpirationAge" Class="projection-item" />
            </FieldBody>
        </Field>
        <Field>
            <FieldLabel>
                Annual Inflation
            </FieldLabel>
            <FieldBody>
                <NumericEdit TValue="decimal" @bind-Value="@_model.AnnualInflation" Class="projection-item" />
            </FieldBody>
        </Field>
        <Field>
            <FieldBody>
                <button type="button" class="btn-client" title="Calculate" @onclick="GetSavingsProjection">
                    <i class="oi bi-calculator" style="font-size: 1.2rem;"></i>
                </button>
            </FieldBody>
        </Field>
    </ContentCard>

    <ContentCard Height="40rem" Width="60rem">
        <div style="margin-bottom:1rem;"><em>Portfolio Projection</em></div>
        <LoadingOrbital
            Style="text-align: center;"
            LoadingText="Say Cheese"
            IsLoading="_loading"
        >
        </LoadingOrbital>
        <CurrencyChart 
        Id="projection"
        Type="@ChartType.Line"
        xLabel="Age"
        yLabel="Value"
        @ref="_chart"
        >
        </CurrencyChart>
    </ContentCard>
</ContentRow>      


@code {
    private bool _loading { get; set; } = false;

    private List<Account> _accounts = new List<Account>();
    private List<Asset> _assets = new List<Asset>();
    private List<Expense> _expenses = new List<Expense>();
    private List<Income> _incomes = new List<Income>();

    private ProjectionModel _model = new ProjectionModel()
    {
        CurrentAge = 50,
        ExpirationAge = 100,
        AnnualInflation = 3.0M,
     };

    private CurrencyChart _chart = new CurrencyChart();
    private LoadingOrbital _orbital = new LoadingOrbital();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        _accounts = await Http.GetFromJsonAsync<List<Account>>("account/read") ?? new List<Account>();
        _assets = await Http.GetFromJsonAsync<List<Asset>>("asset/read") ?? new List<Asset>();
        _expenses = await Http.GetFromJsonAsync<List<Expense>>("expense/read") ?? new List<Expense>();
        _incomes = await Http.GetFromJsonAsync<List<Income>>("income/read") ?? new List<Income>();

        _loading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetSavingsProjection();
    }

    private async Task GetSavingsProjection()
    {
        DateOnly today = DateOnly.FromDateTime(DateTime.Now);

        List<Account> accounts = _accounts
            .Select(x => x.Clone())
            .ToList();

        List<Asset> assets = _assets
            .Select(x => x.Clone())
            .Where(y => y.SellDate >= today)
            .ToList();

        List<Expense> expenses = _expenses
            .Select(x => x.Clone())
            .ToList();

        List<Income> incomes = _incomes
            .Select(x => x.Clone())
            .ToList();

        List<string> labels = new List<string>();
        List<string> balance = new List<string>();
        List<string> liquid = new List<string>();
        List<string> illiquid = new List<string>();

        int years = _model.ExpirationAge - _model.CurrentAge;

        foreach (var day in today.DaysUntil(today.AddYears(years)))
        {
            // Subtract daily expenses + inflation from account balance and/or asset market value
            foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Daily)){
                // if asset id = expense asset id and market value >= expense, then subtract expense from asset market value
                var asset = assets.Where(x => x.Id == expense.Asset?.Id && x.MarketValue >= expense.Amount && day <= x.SellDate).FirstOrDefault();
                if (asset != null){
                    asset.MarketValue -= expense.Amount;
                    continue;
                }

                // if account id = expense account id and balance >= expense, then subtract expense from account balance
                var account = accounts.Where(x => x.Id == expense.Account?.Id && x.Balance >= expense.Amount).FirstOrDefault();
                if (account != null){
                    account.Balance -= expense.Amount;
                    continue;
                }

                // subtract expense equally among all account assets
                var asses = assets.Where(x => x.AccountId == expense.Account?.Id && day <= x.SellDate);
                if (asses.Count() > 0){
                    var amount = expense.Amount / asses.Count();

                    foreach (var ass in asses){
                        ass.MarketValue -= amount;
                    } 
                }
            }

            // Add daily incomes to account balance and/or asset market value
            foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Daily)){
                // if asset id = income asset id, then add the income to the asset market value
                var asset = assets.Where(x => x.Id == income.Asset?.Id && day <= x.SellDate).FirstOrDefault();
                if (asset != null){
                    asset.MarketValue = (asset.MarketValue + income.Amount);
                    continue;
                }

                // distribute income equally among all account assets
                var asses = assets.Where(x => x.AccountId == income.Account?.Id && day <= x.SellDate);
                if (asses.Count() > 0){
                    var amount = income.Amount / asses.Count();

                    foreach (var ass in asses){
                        ass.MarketValue = (ass.MarketValue + amount);
                    }
                    continue;
                }

                // if account id = income account id, then add the income to account balance
                var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                if (account != null){
                    account.Balance = (account.Balance + income.Amount);
                }
            }

            foreach (var account in accounts){
                // Add daily portion of annual growth percentage to account balance
                account.Balance += account.Balance * (decimal)((account.AnnualGrowth / 100) / 365) ;
            }

            foreach (var asset in assets.Where(x => x.PurchaseDate <= day &&  day <= x.SellDate)){
                // Add daily portion of annual growth percentage to market value
                asset.MarketValue += asset.MarketValue * (decimal)((asset.AnnualGrowth / 100) / 365);
            }

            foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.InflationSensitive == true)){
                // Add daily portion of inflation percentage to expense amount
                expense.Amount += expense.Amount * (decimal)((_model.AnnualInflation / 100) / 365);
                // Console.WriteLine($"Day: {day}  Expense Name: {expense.Description} Expense Amount: {expense.Amount}");
            }

            if(day.DayOfYear == 1){
                // Console.WriteLine($"Accounts Balance: {accounts.Select(x => x.Balance).Sum()}");
                // Console.WriteLine($"Assets Balance: {assets.Select(x => x.MarketValue).Sum()}");
                foreach (var asset in assets.Where(x => x.PurchaseDate <= day && day <= x.SellDate && x.DividendRate > 0)){
                    // Add annual dividend yield to market value (reinvested)
                    asset.MarketValue += (decimal)asset.Quantity * asset.DividendRate;
                }

                labels.Add((_model.CurrentAge + day.Year - today.Year).ToString());

                balance.Add(accounts
                    .Select(x => x.Balance)
                    .Sum()
                    .ToString()
                );

                liquid.Add(assets
                    .Where(x => x.Type.isLiquid())
                    .Select(y => y.MarketValue)
                    .Sum()
                    .ToString()
                );

                illiquid.Add(assets
                    .Where(x => x.Type.isIlliquid())
                    .Select(y => y.MarketValue)
                    .Sum()
                    .ToString()
                );
            }

            if (day.IsWeekly()){
                // Subtract weekly expenses from account balance and/or asset market value
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Weekly)){
                    // if asset id = expense asset id and market value >= expense, then subtract expense from asset market value
                    var asset = assets.Where(x => x.Id == expense.Asset?.Id && x.MarketValue >= expense.Amount).FirstOrDefault();
                    if (asset != null){
                        asset.MarketValue -= expense.Amount;
                        continue;
                    }

                    // if account id = expense account id and balance >= expense, then subtract expense from account balance
                    var account = accounts.Where(x => x.Id == expense.Account?.Id && x.Balance >= expense.Amount).FirstOrDefault();
                    if (account != null){
                        account.Balance -= expense.Amount;
                        continue;
                    }

                    // subtract expense equally among all account assets
                    var asses = assets.Where(x => x.AccountId == expense.Account?.Id);
                    if (asses.Count() > 0){
                        var amount = expense.Amount / asses.Count();

                        foreach (var ass in asses){
                            ass.MarketValue -= amount;
                        }
                    }
                }

                // Add weekly incomes to account balance and/or asset market value
                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Weekly)){
                    // if asset id = income asset id, then add the income to the asset market value
                    var asset = assets.Where(x => x.Id == income.Asset?.Id && day <= x.SellDate).FirstOrDefault();
                    if (asset != null){
                        asset.MarketValue = (asset.MarketValue + income.Amount);
                        continue;
                    }

                    // distribute income equally among all account assets
                    var asses = assets.Where(x => x.AccountId == income.Account?.Id && day <= x.SellDate);
                    if (asses.Count() > 0){
                        var amount = income.Amount / asses.Count();

                        foreach (var ass in asses){
                            ass.MarketValue = (ass.MarketValue + amount);
                        }
                        continue;
                    }

                    // if account id = income account id, then add the income to account balance
                    var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                    if (account != null){
                        account.Balance = (account.Balance + income.Amount);
                    }
                }
            }

            if (day.IsBiWeekly()){
                // Subtract bi weekly expenses from account balance and/or asset market value
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.BiWeekly)){
                    // if asset id = expense asset id and market value >= expense, then subtract expense from asset market value
                    var asset = assets.Where(x => x.Id == expense.Asset?.Id && x.MarketValue >= expense.Amount).FirstOrDefault();
                    if (asset != null){
                        asset.MarketValue -= expense.Amount;
                        continue;
                    }

                    // if account balance >= expense, then subtract expense from account balance
                    var account = accounts.Where(x => x.Id == expense.Account?.Id && x.Balance > 0).FirstOrDefault();
                    if (account != null){
                        account.Balance -= expense.Amount;
                        continue;
                    }

                    // subtract expense equally among all account assets
                    var asses = assets.Where(x => x.AccountId == expense.Account?.Id);
                    if (asses.Count() > 0){
                        var amount = expense.Amount / asses.Count();

                        foreach (var ass in asses){
                            ass.MarketValue -= amount;
                        }
                    }
                }

                // Add bi weekly incomes to account balance and/or asset market value
                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.BiWeekly)){
                    // if asset id = income asset id, then add the income to the asset market value
                    var asset = assets.Where(x => x.Id == income.Asset?.Id && day <= x.SellDate).FirstOrDefault();
                    if (asset != null){
                        asset.MarketValue = (asset.MarketValue + income.Amount);
                        continue;
                    }

                    // distribute income equally among all account assets
                    var asses = assets.Where(x => x.AccountId == income.Account?.Id && day <= x.SellDate);
                    if (asses.Count() > 0){
                        var amount = income.Amount / asses.Count();

                        foreach (var ass in asses){
                            ass.MarketValue = (ass.MarketValue + amount);
                        }
                        continue;
                    }

                    // if account id = income account id, then add the income to account balance
                    var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                    if (account != null){
                        account.Balance = (account.Balance + income.Amount);
                    }
                }
            }

            if (day.IsSemiMonthly()){
                // Subtract semi monthly expenses from account balance and/or asset market value
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiMonthly)){
                    // if asset id = expense asset id and market value >= expense, then subtract expense from asset market value
                    var asset = assets.Where(x => x.Id == expense.Asset?.Id && x.MarketValue >= expense.Amount).FirstOrDefault();
                    if (asset != null){
                        asset.MarketValue -= expense.Amount;
                        continue;
                    }

                    // if account id = expense account id and balance >= expense, then subtract expense from account balance
                    var account = accounts.Where(x => x.Id == expense.Account?.Id && x.Balance >= expense.Amount).FirstOrDefault();
                    if (account != null){
                        account.Balance -= expense.Amount;
                        continue;
                    }

                    // subtract expense equally among all account assets
                    var asses = assets.Where(x => x.AccountId == expense.Account?.Id);
                    if (asses.Count() > 0){
                        var amount = expense.Amount / asses.Count();

                        foreach (var ass in asses){
                            ass.MarketValue -= amount;
                        }
                    }
                }

                // Add semi monthly incomes to account balance and/or asset market value
                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiMonthly)){
                    // if asset id = income asset id, then add the income to the asset market value
                    var asset = assets.Where(x => x.Id == income.Asset?.Id && day <= x.SellDate).FirstOrDefault();
                    if (asset != null){
                        asset.MarketValue = (asset.MarketValue + income.Amount);
                        continue;
                    }

                    // distribute income equally among all account assets
                    var asses = assets.Where(x => x.AccountId == income.Account?.Id && day <= x.SellDate);
                    if (asses.Count() > 0){
                        var amount = income.Amount / asses.Count();

                        foreach (var ass in asses){
                            ass.MarketValue = (ass.MarketValue + amount);
                        }
                        continue;
                    }

                    // if account id = income account id, then add the income to account balance
                    var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                    if (account != null){
                        account.Balance = (account.Balance + income.Amount);
                    }
                }
            }

            if (day.IsMonthly()){
                // Subtract monthly expenses from account balance and/or asset market value
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Monthly)){
                    // if asset id = expense asset id and market value >= expense, then subtract expense from asset market value
                    var asset = assets.Where(x => x.Id == expense.Asset?.Id && x.MarketValue >= expense.Amount).FirstOrDefault();
                    if (asset != null){
                        asset.MarketValue -= expense.Amount;
                        continue;
                    }

                    // if account id = expense account id and balance >= expense, then subtract expense from account balance
                    var account = accounts.Where(x => x.Id == expense.Account?.Id && x.Balance >= expense.Amount).FirstOrDefault();
                    if (account != null){
                        account.Balance -= expense.Amount;
                        continue;
                    }

                    // subtract expense equally among all account assets
                    var asses = assets.Where(x => x.AccountId == expense.Account?.Id);
                    if (asses.Count() > 0){
                        var amount = expense.Amount / asses.Count();

                        foreach (var ass in asses){
                            ass.MarketValue -= amount;
                        }
                    }
                }

                // Add monthly incomes to account balance and/or asset market value
                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Monthly)){
                    // if asset id = income asset id, then add the income to the asset market value
                    var asset = assets.Where(x => x.Id == income.Asset?.Id && day <= x.SellDate).FirstOrDefault();
                    if (asset != null){
                        asset.MarketValue = (asset.MarketValue + income.Amount);
                        continue;
                    }

                    // distribute income equally among all account assets
                    var asses = assets.Where(x => x.AccountId == income.Account?.Id && day <= x.SellDate);
                    if (asses.Count() > 0){
                        var amount = income.Amount / asses.Count();

                        foreach (var ass in asses){
                            ass.MarketValue = (ass.MarketValue + amount);
                        }
                        continue;
                    }

                    // if account id = income account id, then add the income to account balance
                    var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                    if (account != null){
                        account.Balance = (account.Balance + income.Amount);
                    }
                }
            }

            if (day.IsSemiAnnually()){
                // Subtract semi annual expenses from account balance and/or asset market value
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiAnnually)){
                    // if asset id = expense asset id and market value >= expense, then subtract expense from asset market value
                    var asset = assets.Where(x => x.Id == expense.Asset?.Id && x.MarketValue >= expense.Amount).FirstOrDefault();
                    if (asset != null){
                        asset.MarketValue -= expense.Amount;
                        continue;
                    }

                    // if account id = expense account id and balance >= expense, then subtract expense from account balance
                    var account = accounts.Where(x => x.Id == expense.Account?.Id && x.Balance >= expense.Amount).FirstOrDefault();
                    if (account != null){
                        account.Balance -= expense.Amount;
                        continue;
                    }

                    // subtract expense equally among all account assets
                    var asses = assets.Where(x => x.AccountId == expense.Account?.Id);
                    if (asses.Count() > 0){
                        var amount = expense.Amount / asses.Count();

                        foreach (var ass in asses){
                            ass.MarketValue -= amount;
                        }
                    }
                }

                // Add semi annual incomes to account balance and/or asset market value
                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiAnnually)){
                    // if asset id = income asset id, then add the income to the asset market value
                    var asset = assets.Where(x => x.Id == income.Asset?.Id && day <= x.SellDate).FirstOrDefault();
                    if (asset != null){
                        asset.MarketValue = (asset.MarketValue + income.Amount);
                        continue;
                    }

                    // distribute income equally among all account assets
                    var asses = assets.Where(x => x.AccountId == income.Account?.Id && day <= x.SellDate);
                    if (asses.Count() > 0){
                        var amount = income.Amount / asses.Count();

                        foreach (var ass in asses){
                            ass.MarketValue = (ass.MarketValue + amount);
                        }
                        continue;
                    }

                    // if account id = income account id, then add the income to account balance
                    var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                    if (account != null){
                        account.Balance = (account.Balance + income.Amount);
                    }
                }
            }         

            // Subtract annual expenses from account balance and/or asset market value
            foreach (var expense in expenses.Where(x => x.StartingDate.Month == day.Month && x.StartingDate.Day == day.Day && x.EndingDate >= day && x.Frequency == Frequency.Annually)){
                // if asset id = expense asset id and market value >= expense, then subtract expense from asset market value
                var asset = assets.Where(x => x.Id == expense.Asset?.Id && x.MarketValue >= expense.Amount).FirstOrDefault();
                if (asset != null){
                    asset.MarketValue -= expense.Amount;
                    continue;
                }

                // if account id = expense account id and balance >= expense, then subtract expense from account balance
                var account = accounts.Where(x => x.Id == expense.Account?.Id && x.Balance >= expense.Amount).FirstOrDefault();
                if (account != null){
                    account.Balance -= expense.Amount;
                    continue;
                }

                // subtract expense equally among all account assets
                var asses = assets.Where(x => x.AccountId == expense.Account?.Id);
                if (asses.Count() > 0){
                    var amount = expense.Amount / asses.Count();

                    foreach (var ass in asses){
                        ass.MarketValue -= amount;
                    }
                }
            }

            // Add annual incomes to account balance and/or asset market value
            foreach (var income in incomes.Where(x => x.StartingDate.Month == day.Month && x.StartingDate.Day == day.Day && x.EndingDate >= day && x.Frequency == Frequency.Annually)){
                // if asset id = income asset id, then add the income to the asset market value
                var asset = assets.Where(x => x.Id == income.Asset?.Id && day <= x.SellDate).FirstOrDefault();
                if (asset != null){
                    asset.MarketValue = (asset.MarketValue + income.Amount);
                    continue;
                }

                // distribute income equally among all account assets
                var asses = assets.Where(x => x.AccountId == income.Account?.Id && day <= x.SellDate);
                if (asses.Count() > 0){
                    var amount = income.Amount / asses.Count();

                    foreach (var ass in asses){
                        ass.MarketValue = (ass.MarketValue + amount);
                    }
                    continue;
                }

                // if account id = income account id, then add the income to account balance
                var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                if (account != null){
                    account.Balance = (account.Balance + income.Amount);
                }
            }
        }

        await _chart.Clear();

        _chart.Labels = labels;

        _chart.Datasets.Add(
            new ChartDataset
            {
                Label = "Account Balance $",
                Data = balance.ToArray(),
                BackgroundColor = new string[] { "#81C78480" },
                BorderColor = "#194D33",
            }
        );

        _chart.Datasets.Add(
            new ChartDataset
            {
                Label = "Liquid Assets $",
                Data =liquid.ToArray(),
                    BackgroundColor = new string[] { "#FF8A6580" },
                BorderColor = "#BF360C",
            });

        _chart.Datasets.Add(
            new ChartDataset
            {
                Label = "Illiquid Assets $",
                Data = illiquid.ToArray(),
                    BackgroundColor = new string[] { "#64B5F680" },
                BorderColor = "#0D47A1",

            });

        await _chart.Update();
    }
}

@page "/projection"
@using BlazorFinance.Client.Helpers
@using BlazorFinance.Client.Types
@using BlazorFinance.Shared.Entities
@using BlazorFinance.Shared.Extensions
@using BlazorFinance.Shared.Types
@using BlazorFinance.Shared.Models
@inject HttpClient Http


<ContentRow>
    <ContentCard>
        <div style="margin-bottom:1rem;"><em>Projection Inputs</em></div>
        <Field>
            <FieldLabel>
                Current Age
            </FieldLabel>
            <FieldBody>
                <NumericEdit TValue="int" @bind-Value="@_model.CurrentAge" Class="projection-item" />
            </FieldBody>
        </Field>
        <Field>
            <FieldLabel>
                Expiration Age
            </FieldLabel>
            <FieldBody>
                <NumericEdit TValue="int" @bind-Value="@_model.ExpirationAge" Class="projection-item" />
            </FieldBody>
        </Field>
        <Field>
            <FieldLabel>
                Annual Inflation
            </FieldLabel>
            <FieldBody>
                <NumericEdit TValue="decimal" @bind-Value="@_model.AnnualInflation" Class="projection-item" />
            </FieldBody>
        </Field>
        <Field>
            <FieldBody>
                <button type="button" class="btn-client" title="Calculate" @onclick="GetSavingsProjection">
                    <i class="oi bi-calculator" style="font-size: 1.2rem;"></i>
                </button>
            </FieldBody>
        </Field>
    </ContentCard>

    <ContentCard Height="40rem" Width="60rem">
        <div style="margin-bottom:1rem;"><em>Portfolio Projection</em></div>
        <LoadingOrbital
        Style="text-align: center;"
        LoadingText="Say Cheese"
        IsLoading="_loading">
        </LoadingOrbital>
        <CurrencyChart 
        Id="projection"
        Type="@ChartType.Line"
        xLabel="Age"
        yLabel="Value"
        @ref="_chart"
        >
        </CurrencyChart>
    </ContentCard>
</ContentRow>      


@code {
    private List<Account> _accounts = new List<Account>();
    private List<Asset> _assets = new List<Asset>();
    private List<Expense> _expenses = new List<Expense>();
    private List<Income> _incomes = new List<Income>();

    private ProjectionModel _model = new ProjectionModel()
    {
        CurrentAge = 50,
        ExpirationAge = 100,
        AnnualInflation = 3.0M,
     };

    private CurrencyChart _chart = new CurrencyChart();

    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _accounts = await Http.GetFromJsonAsync<List<Account>>("account/read") ?? new List<Account>();
        _assets = await Http.GetFromJsonAsync<List<Asset>>("asset/read") ?? new List<Asset>();
        _expenses = await Http.GetFromJsonAsync<List<Expense>>("expense/read") ?? new List<Expense>();
        _incomes = await Http.GetFromJsonAsync<List<Income>>("income/read") ?? new List<Income>();
        _loading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetSavingsProjection();
    }

    private async Task GetSavingsProjection()
    {
        List<Account> accounts = _accounts
            .Select(x => x.Clone())
            .ToList();

        List<Asset> assets = _assets
            .Select(x => x.Clone())
            .ToList();

        List<Expense> expenses = _expenses
            .Select(x => x.Clone())
            .ToList();

        List<Income> incomes = _incomes
            .Select(x => x.Clone())
            .ToList();

        List<string> labels = new List<string>();
        List<string> balance = new List<string>();
        List<string> liquid = new List<string>();
        List<string> illiquid = new List<string>();

        int years = _model.ExpirationAge - _model.CurrentAge;
        DateOnly today = DateOnly.FromDateTime(DateTime.Now);


        foreach (var day in today.DaysUntil(today.AddYears(years)))
        {
            // Subtract daily expenses + inflation from account balance and/or asset market value
            foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Daily)){
                decimal amount = expense.Asset?.Id > 0 && expense.Account?.Id > 0 ? expense.Amount / 2 : expense.Amount;

                foreach(var account in accounts.Where(x => x.Id == expense.Account?.Id)){
                    account.Balance -= amount + (amount * (_model.AnnualInflation / 100));
                    // Console.WriteLine($"Daily Expense of {amount} Subtracted From Account: {account.Name}, Account Balance: {account.Balance}");
                }

                foreach (var asset in assets.Where(x => x.Id == expense.Asset?.Id)){
                    asset.MarketValue -= amount + (amount * (_model.AnnualInflation / 100));
                    // Console.WriteLine($"Daily Expense of {amount} Subtracted From Asset: {asset.Description}, Asset Market Value: {asset.MarketValue}");
                }
            }

            // Add daily incomes to account balance and/or asset market value
            foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Daily)){
                decimal amount = income.Asset?.Id > 0 && income.Account?.Id > 0 ? income.Amount / 2 : income.Amount;

                foreach (var account in accounts.Where(x => x.Id == income.Account?.Id)){
                    account.Balance = (account.Balance + amount);
                    // Console.WriteLine($"Daily Income of {amount} Added to Account: {account.Name}, Account Balance: {account.Balance}");
                }

                foreach (var asset in assets.Where(x => x.Id == income.Asset?.Id)){
                    asset.MarketValue = (asset.MarketValue + amount);
                    // Console.WriteLine($"Daily Income of {amount} Added to Asset: {asset.Description}, Asset Market Value: {asset.MarketValue}");
                }
            }

            foreach (var account in accounts){
                // Add daily portion of annual growth percentage to account balance
                account.Balance += account.Balance * (decimal)((account.AnnualGrowth / 100) / 365) ;
            }

            foreach (var asset in assets.Where(x => x.PurchaseDate <= day &&  day <= x.SellDate)){
                // Add daily portion of annual growth percentage to market value
                asset.MarketValue += asset.MarketValue * (decimal)((asset.AnnualGrowth / 100) / 365);
            }

            if(day.DayOfYear == 1){
                // Console.WriteLine($"Accounts Balance: {accounts.Select(x => x.Balance).Sum()}");
                // Console.WriteLine($"Assets Balance: {assets.Select(x => x.MarketValue).Sum()}");
                foreach (var asset in assets.Where(x => x.PurchaseDate <= day && day <= x.SellDate && x.DividendRate > 0)){
                    // Add annual dividend yield to market value (reinvested)
                    asset.MarketValue += (decimal)asset.Quantity * asset.DividendRate;
                }

                labels.Add((_model.CurrentAge + day.Year - today.Year).ToString());

                balance.Add(accounts
                    .Select(x => x.Balance)
                    .Sum()
                    .ToString()
                );

                liquid.Add(assets
                    .Where(x => x.Type.isLiquid())
                    .Select(y => y.MarketValue)
                    .Sum()
                    .ToString()
                );

                illiquid.Add(assets
                    .Where(x => x.Type.isIlliquid())
                    .Select(y => y.MarketValue)
                    .Sum()
                    .ToString()
                );
            }

            if (day.IsWeekly()){
                // Subtract weekly expenses from account balance and/or asset market value (50/50 split if both are defined)
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Weekly)){
                    decimal amount = expense.Asset?.Id > 0 && expense.Account?.Id > 0 ? expense.Amount / 2 : expense.Amount;

                    foreach (var account in accounts.Where(x => x.Id == expense.Account?.Id)){
                        account.Balance -= amount + (amount * (_model.AnnualInflation / 100));
                    }
                    foreach (var asset in assets.Where(x => x.Id == expense.Asset?.Id)){
                        asset.MarketValue -= amount + (amount * (_model.AnnualInflation / 100));
                    }
                }

                // Add weekly incomes to account balance and/or asset market value (50/50 split if both are defined)
                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Weekly)){
                    foreach (var account in accounts.Where(x => x.Id == income.Account?.Id)){
                        account.Balance += income.Asset?.Id == 0 ? income.Amount : income.Amount / 2;
                    }
                    foreach (var asset in assets.Where(x => x.Id == income.Asset?.Id)){
                        asset.MarketValue += income.Account?.Id == 0 ? income.Amount : income.Amount / 2;
                    }
                }
            }

            if (day.IsBiWeekly()){
                // Subtract bi weekly expenses from account balance and/or asset market value (50/50 split if both are defined)
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.BiWeekly)){
                    decimal amount = expense.Asset?.Id > 0 && expense.Account?.Id > 0 ? expense.Amount / 2 : expense.Amount;

                    foreach (var account in accounts.Where(x => x.Id == expense.Account?.Id)){
                        account.Balance -= amount + (amount * (_model.AnnualInflation / 100));
                    }
                    foreach (var asset in assets.Where(x => x.Id == expense.Asset?.Id)){
                        asset.MarketValue -= amount + (amount * (_model.AnnualInflation / 100));
                    }
                }

                // Add bi weekly incomes to account balance and/or asset market value (50/50 split if both are defined)
                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.BiWeekly)){
                    foreach (var account in accounts.Where(x => x.Id == income.Account?.Id)){
                        account.Balance += income.Asset?.Id == 0 ? income.Amount : income.Amount / 2;
                    }
                    foreach (var asset in assets.Where(x => x.Id == income.Asset?.Id)){
                        asset.MarketValue += income.Account?.Id == 0 ? income.Amount : income.Amount / 2;
                    }
                }
            }

            if (day.IsSemiMonthly()){
                // Subtract semi monthly expenses from account balance and/or asset market value (50/50 split if both are defined)
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiMonthly)){
                    decimal amount = expense.Asset?.Id > 0 && expense.Account?.Id > 0 ? expense.Amount / 2 : expense.Amount;

                    foreach (var account in accounts.Where(x => x.Id == expense.Account?.Id)){
                        account.Balance -= amount + (amount * (_model.AnnualInflation / 100));
                        // Console.WriteLine($"SemiMonthly Income of {amount} Subtracted From Account: {account.Name}, Account Balance: {account.Balance}");
                    }

                    foreach (var asset in assets.Where(x => x.Id == expense.Asset?.Id)){
                        asset.MarketValue -= amount + (amount * (_model.AnnualInflation / 100));
                        // Console.WriteLine($"SemiMonthly Income of {amount} Subtracted From Asset: {asset.Description}, Asset Market Value: {asset.MarketValue}");
                    }
                }

                // Add semi monthly incomes to account balance and/or asset market value (50/50 split if both are defined)
                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiMonthly)){
                    decimal amount = income.Asset?.Id > 0 && income.Account?.Id > 0 ? income.Amount / 2 : income.Amount;

                    foreach (var account in accounts.Where(x => x.Id == income.Account?.Id)){
                        account.Balance = (account.Balance + amount);
                        // Console.WriteLine($"SemiMonthly Income of {amount} Added to Account: {account.Name}, Account Balance: {account.Balance}");
                    }

                    foreach (var asset in assets.Where(x => x.Id == income.Asset?.Id)){
                        asset.MarketValue = (asset.MarketValue + amount);
                        // Console.WriteLine($"SemiMonthly Income of {amount} Added to Asset: {asset.Description}, Asset Market Value: {asset.MarketValue}");
                    }
                }
            }

            if (day.IsMonthly()){
                // Subtract monthly expenses from account balance and/or asset market value (50/50 split if both are defined)
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Monthly)){
                    decimal amount = expense.Asset?.Id > 0 && expense.Account?.Id > 0 ? expense.Amount / 2 : expense.Amount;

                    foreach (var account in accounts.Where(x => x.Id == expense.Account?.Id)){
                        account.Balance -= amount + (amount * (_model.AnnualInflation / 100));
                    }
                    foreach (var asset in assets.Where(x => x.Id == expense.Asset?.Id)){
                        asset.MarketValue -= amount + (amount * (_model.AnnualInflation / 100));
                    }
                }

                // Add monthly incomes to account balance and/or asset market value (50/50 split if both are defined)
                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Monthly)){
                    foreach (var account in accounts.Where(x => x.Id == income.Account?.Id)){
                        account.Balance += income.Asset?.Id == 0 ? income.Amount : income.Amount / 2;
                    }
                    foreach (var asset in assets.Where(x => x.Id == income.Asset?.Id)){
                        asset.MarketValue += income.Account?.Id == 0 ? income.Amount : income.Amount / 2;
                    }
                }
            }

            if (day.IsSemiAnnually()){
                // Subtract semi annual expenses from account balance and/or asset market value (50/50 split if both are defined)
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiAnnually)){
                    decimal amount = expense.Asset?.Id > 0 && expense.Account?.Id > 0 ? expense.Amount / 2 : expense.Amount;

                    foreach (var account in accounts.Where(x => x.Id == expense.Account?.Id)){
                        account.Balance -= amount + (amount * (_model.AnnualInflation / 100));
                    }
                    foreach (var asset in assets.Where(x => x.Id == expense.Asset?.Id)){
                        asset.MarketValue -= amount + (amount * (_model.AnnualInflation / 100));
                    }
                }

                // Add semi annual incomes to account balance and/or asset market value (50/50 split if both are defined)
                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiAnnually))
                {
                    foreach (var account in accounts.Where(x => x.Id == income.Account?.Id)){
                        account.Balance += income.Asset?.Id == 0 ? income.Amount : income.Amount / 2;
                    }
                    foreach (var asset in assets.Where(x => x.Id == income.Asset?.Id)){
                        asset.MarketValue += income.Account?.Id == 0 ? income.Amount : income.Amount / 2;
                    }
                }
            }         

            // Subtract annual expenses from account balance and/or asset market value (50/50 split if both are defined)
            foreach (var expense in expenses.Where(x => x.StartingDate.Month == day.Month && x.StartingDate.Day == day.Day && x.EndingDate >= day && x.Frequency == Frequency.Annually))
            {
                decimal amount = expense.Asset?.Id > 0 && expense.Account?.Id > 0 ? expense.Amount / 2 : expense.Amount;

                foreach (var account in accounts.Where(x => x.Id == expense.Account?.Id))
                {
                    account.Balance -= amount + (amount * (_model.AnnualInflation / 100));
                }
                foreach (var asset in assets.Where(x => x.Id == expense.Asset?.Id))
                {
                    asset.MarketValue -= amount + (amount * (_model.AnnualInflation / 100));
                }
            }

            // Add annual incomes to account balance and/or asset market value (50/50 split if both are defined)
            foreach (var income in incomes.Where(x => x.StartingDate.Month == day.Month && x.StartingDate.Day == day.Day && x.EndingDate >= day && x.Frequency == Frequency.Annually))
            {
                foreach (var account in accounts.Where(x => x.Id == income.Account?.Id))
                {
                    account.Balance += income.Asset?.Id == 0 ? income.Amount : income.Amount / 2;
                }
                foreach (var asset in assets.Where(x => x.Id == income.Asset?.Id))
                {
                    asset.MarketValue += income.Account?.Id == 0 ? income.Amount : income.Amount / 2;
                }
            }


            // if (day.IsAnnually()){
            //     // Subtract annual expenses from account balance and/or asset market value (50/50 split if both are defined)
            //     foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Annually)){
            //         decimal amount = expense.Asset?.Id > 0 && expense.Account?.Id > 0 ? expense.Amount / 2 : expense.Amount;

            //         foreach (var account in accounts.Where(x => x.Id == expense.Account?.Id)){
            //             account.Balance -= amount + (amount * (_model.AnnualInflation / 100));
            //         }
            //         foreach (var asset in assets.Where(x => x.Id == expense.Asset?.Id)){
            //             asset.MarketValue -= amount + (amount * (_model.AnnualInflation / 100));
            //         }
            //     }

            //     // Add annual incomes to account balance and/or asset market value (50/50 split if both are defined)
            //     foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Annually)){
            //         foreach (var account in accounts.Where(x => x.Id == income.Account?.Id)){
            //             account.Balance += income.Asset?.Id == 0 ? income.Amount : income.Amount / 2;
            //         }
            //         foreach (var asset in assets.Where(x => x.Id == income.Asset?.Id)){
            //             asset.MarketValue += income.Account?.Id == 0 ? income.Amount : income.Amount / 2;
            //         }
            //     }
            // }
        }

        await _chart.Clear();

        _chart.Labels = labels;

        _chart.Datasets.Add(
            new ChartDataset
            {
                Label = "Account Balance $",
                Data = balance.ToArray(),
                BackgroundColor = new string[] { "#81C78480" },
                BorderColor = "#194D33",
            }
        );

        _chart.Datasets.Add(
            new ChartDataset
            {
                Label = "Liquid Assets $",
                Data =liquid.ToArray(),
                    BackgroundColor = new string[] { "#FF8A6580" },
                BorderColor = "#BF360C",
            });

        _chart.Datasets.Add(
            new ChartDataset
            {
                Label = "Illiquid Assets $",
                Data = illiquid.ToArray(),
                    BackgroundColor = new string[] { "#64B5F680" },
                BorderColor = "#0D47A1",

            });

        await _chart.Update();
    }
}

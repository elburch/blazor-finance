@page "/projection"
@using BlazorFinance.Client.Helpers
@using BlazorFinance.Client.Types
@using BlazorFinance.Shared.Entities
@using BlazorFinance.Shared.Extensions
@using BlazorFinance.Shared.Types
@using BlazorFinance.Shared.Models
@inject HttpClient Http


<ContentRow>
    <ContentCard>
        <div style="margin-bottom:1rem;"><em>Projection Inputs</em></div>
        <Field>
            <FieldLabel>
                Current Age
            </FieldLabel>
            <FieldBody>
                <NumericEdit TValue="int" @bind-Value="@_model.CurrentAge" Class="projection-item" />
            </FieldBody>
        </Field>
        <Field>
            <FieldLabel>
                Expiration Age
            </FieldLabel>
            <FieldBody>
                <NumericEdit TValue="int" @bind-Value="@_model.ExpirationAge" Class="projection-item" />
            </FieldBody>
        </Field>
        <Field>
            <FieldLabel>
                Account Appreciation %
            </FieldLabel>
            <FieldBody>
                <NumericEdit TValue="decimal" @bind-Value="@_model.AccountAppreciation" Class="projection-item" />
            </FieldBody>
        </Field>
        <Field>
            <FieldLabel>
                Asset Appreciation %
            </FieldLabel>
            <FieldBody>
                <NumericEdit TValue="decimal" @bind-Value="@_model.AssetAppreciation" Class="projection-item" />
            </FieldBody>
        </Field>
        <Field>
            <FieldLabel>
                Annual Inflation %
            </FieldLabel>
            <FieldBody>
                <NumericEdit TValue="decimal" @bind-Value="@_model.AnnualInflation" Class="projection-item" />
            </FieldBody>
        </Field>
        <Field>
            <FieldBody>
                <button type="button" class="btn-client" title="Calculate" @onclick="GetAccountProjection">
                    <i class="oi bi-calculator" style="font-size: 1.2rem;"></i>
                </button>
            </FieldBody>
        </Field>
    </ContentCard>
    <ContentCard Height="40rem" Width="60rem">
        <div style="margin-bottom:1rem;"><em>Account Balances</em></div>
        <LoadingOrbital 
        Style="text-align: center;"
        LoadingText="Eeew, Boogers"
        IsLoading="_loading"
        >
        </LoadingOrbital>
        <CurrencyChart 
        Id="projection"
        Type="@ChartType.Line"
        xLabel="Age"
        yLabel="Value"
        @ref="_chart"
        >
        </CurrencyChart>
    </ContentCard>
</ContentRow>      


@code {
    private bool _loading { get; set; } = false;

    private List<Account> _accounts = new List<Account>();
    private List<Asset> _assets = new List<Asset>();
    private List<Expense> _expenses = new List<Expense>();
    private List<Income> _incomes = new List<Income>();

    private ProjectionModel _model = new ProjectionModel()
    {
        CurrentAge = 50,
        ExpirationAge = 100,
        AccountAppreciation = 3.0M,
        AssetAppreciation = 5.0M,
        AnnualInflation = 3.0M
     };

    private CurrencyChart _chart = new CurrencyChart();

    private class AccountBalance
    {
        public int Id { get; set; }

        public string Name { get; set; } = String.Empty;

        public decimal Balance { get; set; }

        public int AssetCount { get; set; }

        public decimal MarketValue { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        _accounts = await Http.GetFromJsonAsync<List<Account>>("account/read") ?? new List<Account>();
        _assets = await Http.GetFromJsonAsync<List<Asset>>("asset/read") ?? new List<Asset>();
        _expenses = await Http.GetFromJsonAsync<List<Expense>>("expense/read") ?? new List<Expense>();
        _incomes = await Http.GetFromJsonAsync<List<Income>>("income/read") ?? new List<Income>();

        _loading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetAccountProjection();
    }

    private async Task GetAccountProjection()
    {
        DateOnly today = DateOnly.FromDateTime(DateTime.Now);

        List<AccountBalance> accounts =
            (
                from Account in _accounts
                let Assets =
                (
                    from Asset in _assets
                    where Asset.AccountId == Account.Id
                    select Asset
                )
                select new AccountBalance() { 
                    Id = Account.Id,
                    Name = Account.Name,
                    Balance = Account.Balance, 
                    AssetCount = Assets.Count(),
                    MarketValue = Assets.Where(x => x.SellDate >= today).Sum(y => y.MarketValue)
                }
            )
            .Where(x => x.Balance > 0 || x.MarketValue > 0)
            .ToList();

        // foreach(AccountBalance bal in balances){
        //     Console.WriteLine($"Id: {bal.Id}, Name: {bal.Name}, Balance: {bal.Balance}, MarketValue: {bal.MarketValue}");
        // }

        List<Asset> assets = _assets
            .Select(x => x.Clone())
            .Where(y => y.Type.isIlliquid() && y.SellDate >= today)
            .ToList();

        List<Expense> expenses = _expenses
            .Select(x => x.Clone())
            .ToList();

        List<Income> incomes = _incomes
            .Select(x => x.Clone())
            .ToList();

        List<string> labels = new List<string>();
        List<string> liquid = new List<string>();
        List<string> illiquid = new List<string>();

        Dictionary<int, List<string>> sets = new Dictionary<int, List<string>>();
        foreach (var account in accounts){
            sets.Add(account.Id, new List<string >());
        }

        int years = _model.ExpirationAge - _model.CurrentAge;

        foreach (var day in today.DaysUntil(today.AddYears(years)))
        {
            foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Daily)){
                // if account id = expense account id, then subtract expense from balance or market value
                var account = accounts.Where(x => x.Id == expense.Account?.Id).FirstOrDefault();
                if (account != null){
                    // if (account.Balance >= expense.Amount)
                    //     account.Balance = (account.Balance - expense.Amount);
                    // else if (account.MarketValue >= expense.Amount)
                    //     account.MarketValue = (account.MarketValue - expense.Amount);
                    if (account.AssetCount > 0)
                        account.MarketValue = (account.MarketValue - expense.Amount);
                    else
                        account.Balance = (account.Balance - expense.Amount);
                }
            }

            foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Daily)){
                // if account id = income account id, then add income to balance or market value
                var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                if (account != null){
                    if (account.AssetCount > 0)
                        account.MarketValue = (account.MarketValue + income.Amount);
                    else
                        account.Balance = (account.Balance + income.Amount);
                }
            }

            foreach (var account in accounts){
                if (account.AssetCount > 0)
                    // Add daily portion of annual growth percentage to market value
                    account.MarketValue += account.MarketValue * (decimal)((_model.AssetAppreciation / 100) / 365);
                else
                    // Add daily portion of annual growth percentage to account balance
                    account.Balance += account.Balance * (decimal)((_model.AccountAppreciation / 100) / 365);
            }

            foreach (var asset in assets){
                // Add daily portion of annual growth percentage to market value
                asset.MarketValue += asset.MarketValue * (decimal)((_model.AssetAppreciation / 100) / 365);
            }

            foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.InflationSensitive == true)){
                // Add daily portion of inflation percentage to expense amount
                expense.Amount += expense.Amount * (decimal)((_model.AnnualInflation / 100) / 365);
                // Console.WriteLine($"Day: {day}  Expense Name: {expense.Description} Expense Amount: {expense.Amount}");
            }

            if(day.DayOfYear == 1){
                labels.Add((_model.CurrentAge + day.Year - today.Year).ToString());

                foreach (var account in accounts){
                    var balance = accounts
                        .Where(x => x.Id == account.Id)
                        .Select(y => y.Balance)
                        .DefaultIfEmpty(0)
                        .First();

                    var market = accounts
                        .Where(x => x.Id == account.Id)
                        .Select(y => y.MarketValue)
                        .DefaultIfEmpty(0)
                        .First();

                    sets[account.Id].Add(Convert.ToString(balance + market));
                }

                var bbal = accounts
                    .Select(x => x.Balance)
                    .Sum();

                var mbal = accounts
                    .Select(x => x.MarketValue)
                    .Sum();

                liquid.Add(Convert.ToString(bbal + mbal));

                illiquid.Add(assets
                    .Where(x => x.SellDate >= day)
                    .Select(y => y.MarketValue)
                    .Sum()
                    .ToString()
                );
            }

            if (day.IsWeekly()){
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Weekly)){
                    // if account id = expense account id, then subtract expense from balance or market value
                    var account = accounts.Where(x => x.Id == expense.Account?.Id).FirstOrDefault();
                    if (account != null){
                        // if (account.Balance >= expense.Amount)
                        //     account.Balance = (account.Balance - expense.Amount);
                        // else// if (account.MarketValue >= expense.Amount)
                        //     account.MarketValue = (account.MarketValue - expense.Amount);
                        if (account.AssetCount > 0)
                            account.MarketValue = (account.MarketValue - expense.Amount);
                        else
                            account.Balance = (account.Balance - expense.Amount);
                    }
                }

                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Weekly)){
                    // if account id = income account id, then add income to balance or market value
                    var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                    if (account != null){
                        if (account.AssetCount > 0)
                            account.MarketValue = (account.MarketValue + income.Amount);
                        else
                            account.Balance = (account.Balance + income.Amount);
                    }
                }
            }

            if (day.IsBiWeekly()){
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.BiWeekly)){
                    // if account id = expense account id, then subtract expense from balance or market value
                    var account = accounts.Where(x => x.Id == expense.Account?.Id).FirstOrDefault();
                    if (account != null){
                        // if (account.Balance >= expense.Amount)
                        //     account.Balance = (account.Balance - expense.Amount);
                        // else if (account.MarketValue >= expense.Amount)
                        //     account.MarketValue = (account.MarketValue - expense.Amount);
                        if (account.AssetCount > 0)
                            account.MarketValue = (account.MarketValue - expense.Amount);
                        else
                            account.Balance = (account.Balance - expense.Amount);
                    }
                }

                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.BiWeekly)){
                    // if account id = income account id, then add income to balance or market value
                    var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                    if (account != null){
                        if (account.AssetCount > 0)
                            account.MarketValue = (account.MarketValue + income.Amount);
                        else
                            account.Balance = (account.Balance + income.Amount);
                    }
                }
            }

            if (day.IsSemiMonthly()){
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiMonthly)){
                    // if account id = expense account id, then subtract expense from balance or market value
                    var account = accounts.Where(x => x.Id == expense.Account?.Id).FirstOrDefault();
                    if (account != null){
                        // if (account.Balance >= expense.Amount)
                        //     account.Balance = (account.Balance - expense.Amount);
                        // else if (account.MarketValue >= expense.Amount)
                        //     account.MarketValue = (account.MarketValue - expense.Amount);
                        if (account.AssetCount > 0)
                            account.MarketValue = (account.MarketValue - expense.Amount);
                        else
                            account.Balance = (account.Balance - expense.Amount);
                    }
                }

                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiMonthly)){
                    // if account id = income account id, then add income to balance or market value
                    var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                    if (account != null){
                        if (account.AssetCount > 0)
                            account.MarketValue = (account.MarketValue + income.Amount);
                        else
                            account.Balance = (account.Balance + income.Amount);
                    }
                }
            }

            if (day.IsMonthly()){
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Monthly)){
                    // if account id = expense account id, then subtract expense from balance or market value
                    var account = accounts.Where(x => x.Id == expense.Account?.Id).FirstOrDefault();
                    if (account != null){
                        // if (account.Balance >= expense.Amount)
                        //     account.Balance = (account.Balance - expense.Amount);
                        // else if (account.MarketValue >= expense.Amount)
                        //     account.MarketValue = (account.MarketValue - expense.Amount);
                        if (account.AssetCount > 0)
                            account.MarketValue = (account.MarketValue - expense.Amount);
                        else
                            account.Balance = (account.Balance - expense.Amount);
                    }
                }

                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Monthly)){
                    // if account id = income account id, then add income to balance or market value
                    var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                    if (account != null){
                        if (account.AssetCount > 0)
                            account.MarketValue = (account.MarketValue + income.Amount);
                        else
                            account.Balance = (account.Balance + income.Amount);
                    }
                }
            }

            if (day.IsSemiAnnually()){
                foreach (var expense in expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiAnnually)){
                    // if account id = expense account id, then subtract expense from balance or market value
                    var account = accounts.Where(x => x.Id == expense.Account?.Id).FirstOrDefault();
                    if (account != null){
                        // if (account.Balance >= expense.Amount)
                        //     account.Balance = (account.Balance - expense.Amount);
                        // else if (account.MarketValue >= expense.Amount)
                        //     account.MarketValue = (account.MarketValue - expense.Amount);
                        if (account.AssetCount > 0)
                            account.MarketValue = (account.MarketValue - expense.Amount);
                        else
                            account.Balance = (account.Balance - expense.Amount);
                    }
                }

                foreach (var income in incomes.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiAnnually)){
                    // if account id = income account id, then add income to balance or market value
                    var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                    if (account != null){
                        if (account.AssetCount > 0)
                            account.MarketValue = (account.MarketValue + income.Amount);
                        else
                            account.Balance = (account.Balance + income.Amount);
                    }
                }
            }         

            foreach (var expense in expenses.Where(x => x.StartingDate.Month == day.Month && x.StartingDate.Day == day.Day && x.EndingDate >= day && x.Frequency == Frequency.Annually)){
                // if account id = expense account id, then subtract expense from balance or market value
                var account = accounts.Where(x => x.Id == expense.Account?.Id).FirstOrDefault();
                if (account != null){
                    // if (account.Balance >= expense.Amount)
                    //     account.Balance = (account.Balance - expense.Amount);
                    // else if (account.MarketValue >= expense.Amount)
                    //     account.MarketValue = (account.MarketValue - expense.Amount);
                    if (account.AssetCount > 0)
                        account.MarketValue = (account.MarketValue - expense.Amount);
                    else
                        account.Balance = (account.Balance - expense.Amount);
                }
            }

            foreach (var income in incomes.Where(x => x.StartingDate.Month == day.Month && x.StartingDate.Day == day.Day && x.EndingDate >= day && x.Frequency == Frequency.Annually)){
                // if account id = income account id, then add income to balance or market value
                var account = accounts.Where(x => x.Id == income.Account?.Id).FirstOrDefault();
                if (account != null){
                    if (account.AssetCount > 0)
                        account.MarketValue = (account.MarketValue + income.Amount);
                    else
                        account.Balance = (account.Balance + income.Amount);
                }
            }
        }

        await _chart.Clear();

        _chart.Labels = labels;

        System.Drawing.Color lime = System.Drawing.Color.Lime;

        foreach (var set in sets){
            string name = accounts
                .Where(x => x.Id == set.Key)
                .Select(y => y.Name)
                .DefaultIfEmpty("")
                .First();

            _chart.Datasets.Add(
                new ChartDataset
                {
                    Label = name,
                    Data = set.Value.ToArray(),
                    BackgroundColor = new string[] { $"#{lime.R:X2}{lime.G:X2}{lime.B:X2}" }
                }
            );

            lime = System.Drawing.Color.FromArgb(lime.A, (int)(lime.R * 0.9), (int)(lime.G * 0.9), (int)(lime.B * 0.9));
        }

        _chart.Datasets.Add(
            new ChartDataset
                {
                    Label = "Aggregate Balance",
                    Data = liquid.ToArray(),
                    BackgroundColor = new string[] { "#FF8A6580" }
                }
        );

        _chart.Datasets.Add(
            new ChartDataset
                {
                    Label = "Real Estate and Collectibles",
                    Data = illiquid.ToArray(),
                    BackgroundColor = new string[] { "#64B5F680" },
                }
        );

        await _chart.Update();
    }
}

@page "/allocation"
@using BlazorFinance.Shared.Models
@using System
@inject HttpClient Http

<h3>Portfolio Summary</h3>

<Card>
    <CardHeader>
        Asset Allocation
    </CardHeader>

    <CardBody>
        @* <Chart @ref="pieChart" Type="ChartType.Pie" TItem="double" Options="@chartOptions" /> *@
    </CardBody>
</Card>

@code {
    // private Chart<double> pieChart = new Chart<double>();
    // ChartOptions chartOptions = new() { AspectRatio = 1.5 };
    // private string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    // private List<string> backgroundColors = new() { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    // private List<string> borderColors = new() { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };


    protected override async Task OnInitializedAsync()
    {
        //Quotes = await Http.GetFromJsonAsync<List<StockModel>>("portfolio") ?? new List<StockModel>();
        // await HandleRedraw(pieChart, GetPieChartDataset);
    }

    // private async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>(Blazorise.Charts.BaseChart<TDataSet, TItem, TOptions, TModel> chart, Func<TDataSet> getDataSet)
    // where TDataSet : ChartDataset<TItem>
    // where TOptions : ChartOptions
    // where TModel : ChartModel
    // {
    //     await chart.Clear();

    //     await chart.AddLabelsDatasetsAndUpdate(Labels, getDataSet());
    // }

    // private int pieLabel;

    // private PieChartDataset<double> GetPieChartDataset()
    // {
    //     return new()
    //         {
    //             Label = $"#{++pieLabel} of randoms",
    //             Data = RandomizeData(),
    //             BackgroundColor = backgroundColors,
    //             BorderColor = borderColors,
    //             BorderWidth = 1
    //         };
    // }

    // List<double> RandomizeData() => RandomizeData(3, 50);

    // List<double> RandomizeData(int min, int max)
    // {
    //     var rand = new Random();

    //     return Enumerable.Range(0, 6).Select(x => rand.Next(min, max) * rand.NextDouble()).ToList();
    // }
}

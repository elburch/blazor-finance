@page "/allocation"
@using BlazorFinance.Client.Helpers
@using BlazorFinance.Client.Types
@using BlazorFinance.Shared.Entities
@using BlazorFinance.Shared.Extensions
@using BlazorFinance.Shared.Models
@using BlazorFinance.Shared.Types
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Interop
@using System
@inject HttpClient Http

<ContentRow>
    <ContentColumn>
        @if (_assetsLoaded)
        {
            <ContentCard>
                <ContentPieChart ChartTitle="Assets" ChartRef="@_assetChart" ChartData="@_assetData"></ContentPieChart>
            </ContentCard>
        }
    </ContentColumn>
    <ContentColumn>
        @if (_incomeLoaded)
        {
            <ContentCard>
                <ContentPieChart ChartTitle="Income" ChartRef="@_incomeChart" ChartData="@_incomeData"></ContentPieChart>
            </ContentCard>
        }
    </ContentColumn>
    <ContentColumn>
        @if (_expensesLoaded)
        {
            <ContentCard>
                <ContentPieChart ChartTitle="Expenses" ChartRef="@_expenseChart" ChartData="@_expenseData"></ContentPieChart>
            </ContentCard>
        }
    </ContentColumn>
</ContentRow>


@code {
    private List<Asset> _assets = new List<Asset>();
    private List<Income> _income = new List<Income>();
    private List<Expense> _expenses = new List<Expense>();

    private PlotlyChart _assetChart = new PlotlyChart();
    private PlotlyChart _incomeChart = new PlotlyChart();
    private PlotlyChart _expenseChart = new PlotlyChart();

    private IList<ITrace>? _assetData;
    private IList<ITrace>? _incomeData;
    private IList<ITrace>? _expenseData;

    bool _assetsLoaded = false;
    bool _incomeLoaded = false;
    bool _expensesLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        _assets = await Http.GetFromJsonAsync<List<Asset>>("asset/read") ?? new List<Asset>();
        _income = await Http.GetFromJsonAsync<List<Income>>("income/read") ?? new List<Income>();
        _expenses = await Http.GetFromJsonAsync<List<Expense>>("expense/read") ?? new List<Expense>();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetAssetData();
        await GetIncomeData();
        await GetExpenseData();
    }

    private async Task GetAssetData()
    {
        List<object> labels = new List<object>();
        List<object> background = new List<object>();
        List<object> values = new List<object>();

        decimal sum = _assets.Sum(x => x.MarketValue);

        foreach (AssetType type in Enum.GetValues(typeof(AssetType)))
        {
            var balance = _assets
                .Where(x => x.Type == type)
                .Sum(y => y.MarketValue);

            if (balance > 0)
            {
                labels.Add(EnumExtensions.GetDisplayName(type));
                values.Add((balance / sum) * 100);
                background.Add(type.ColorMap());
            }
        }

        _assetData = new List<ITrace>
        {
            new Pie
            {
                Values = values,
                Labels = labels,
                // Marker = new Plotly.Blazor.Traces.PieLib.Marker(){ Colors = background }
            }
        };

        await Task.Run(() =>
        {
            _assetChart.React();
        });

        _assetsLoaded = true;
    }

    private async Task GetIncomeData()
    {
        List<object> labels = new List<object>();
        List<object> background = new List<object>();
        List<object> values = new List<object>();

        DateOnly firstDayOfYear = DateOnly.FromDateTime( new DateTime(DateTime.Now.Year, 1, 1) );
        DateOnly lastDayOfYear = DateOnly.FromDateTime( new DateTime(DateTime.Now.Year, 12, 31) );

        Dictionary<IncomeType, decimal> balance = _income.Select(x => x.Type)
            .Distinct()
            .ToDictionary(x => x, x => 0.00M);

        foreach (var day in firstDayOfYear.DaysUntil(lastDayOfYear))
        {
            // Add DAILY INCOME to income type balance
            foreach (var income in _income.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Daily))
            {
                balance[income.Type] = balance[income.Type] + income.Amount;
            }

            // Add WEEKLY INCOME to income type balance
            foreach (var income in _income.Where(x => x.StartingDate <= day && day <= x.EndingDate && day.IsWeekly(x.StartingDate, x.Type) && x.Frequency == Frequency.Weekly))
            {
                balance[income.Type] = balance[income.Type] + income.Amount;
            }

            // Add BIWEEKLY INCOME to income type balance
            foreach (var income in _income.Where(x => x.StartingDate <= day && day <= x.EndingDate && day.IsBiWeekly(x.StartingDate, x.Type) && x.Frequency == Frequency.BiWeekly))
            {
                balance[income.Type] = balance[income.Type] + income.Amount;
            }


            if (day.IsSemiMonthly())
            {
                // Add SEMI MONTHLY INCOME to income type balance
                foreach (var income in _income.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiMonthly))
                {
                    balance[income.Type] = balance[income.Type] + income.Amount;
                }
            }

            if (day.IsMonthly())
            {
                // Add MONTHLY INCOME to income type balance
                foreach (var income in _income.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Monthly))
                {
                    balance[income.Type] = balance[income.Type] + income.Amount;
                }
            }

            if (day.IsSemiAnnually())
            {
                // Add SEMI ANNUAL INCOME to income type balance
                foreach (var income in _income.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiAnnually))
                {
                    balance[income.Type] = balance[income.Type] + income.Amount;
                }
            }

            // Add ANNUAL INCOME to income type balance
            foreach (var income in _income.Where(x => x.StartingDate.Month == day.Month && x.StartingDate.Day == day.Day && x.EndingDate >= day && x.Frequency == Frequency.Annually))
            {
                balance[income.Type] = balance[income.Type] + income.Amount;
            }
        }

        foreach (IncomeType type in balance.Keys)
        {
            if (balance[type] > 0)
            {
                labels.Add(EnumExtensions.GetDisplayName(type));
                values.Add(balance[type]);
                background.Add(type.ColorMap());
            }
        }

        _incomeData = new List<ITrace>
        {
            new Pie
            {
                Values = values,
                Labels = labels,
                //Marker = new Plotly.Blazor.Traces.PieLib.Marker(){ Colors = background }
            }
        };

        await Task.Run(() =>
        {
            _incomeChart.React();
        });

        _incomeLoaded = true;
    }

    private async Task GetExpenseData()
    {
        List<object> labels = new List<object>();
        List<object> background = new List<object>();
        List<object> values = new List<object>();

        DateOnly firstDayOfYear = DateOnly.FromDateTime(new DateTime(DateTime.Now.Year, 1, 1));
        DateOnly lastDayOfYear = DateOnly.FromDateTime(new DateTime(DateTime.Now.Year, 12, 31));

        Dictionary<ExpenseType, decimal> balance = _expenses.Select(x => x.Type)
            .Distinct()
            .ToDictionary(x => x, x => 0.00M);

        foreach (var day in firstDayOfYear.DaysUntil(lastDayOfYear))
        {
            // Add DAILY expense to expense type balance
            foreach (var expense in _expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Daily))
            {
                balance[expense.Type] = balance[expense.Type] + expense.Amount;
            }

            // Add WEEKLY expense to expense type balance
            foreach (var expense in _expenses.Where(x => x.StartingDate.DayOfWeek == day.DayOfWeek && x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Weekly))
            {
                balance[expense.Type] = balance[expense.Type] + expense.Amount;
            }

            // Add BIWEEKLY expense to expense type balance
            foreach (var expense in _expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && day.IsBiWeekly(x.StartingDate) && x.Frequency == Frequency.BiWeekly))
            {
                balance[expense.Type] = balance[expense.Type] + expense.Amount;
            }


            if (day.IsSemiMonthly())
            {
                // Add SEMI MONTHLY expense to expense type balance
                foreach (var expense in _expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiMonthly))
                {
                    balance[expense.Type] = balance[expense.Type] + expense.Amount;
                }
            }

            if (day.IsMonthly())
            {
                // Add MONTHLY expense to expense type balance
                foreach (var expense in _expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.Monthly))
                {
                    balance[expense.Type] = balance[expense.Type] + expense.Amount;
                }
            }

            if (day.IsSemiAnnually())
            {
                // Add SEMI ANNUAL expense to expense type balance
                foreach (var expense in _expenses.Where(x => x.StartingDate <= day && day <= x.EndingDate && x.Frequency == Frequency.SemiAnnually))
                {
                    balance[expense.Type] = balance[expense.Type] + expense.Amount;
                }
            }

            // Add ANNUAL expense to expense type balance
            foreach (var expense in _expenses.Where(x => x.StartingDate.Month == day.Month && x.StartingDate.Day == day.Day && x.EndingDate >= day && x.Frequency == Frequency.Annually))
            {
                balance[expense.Type] = balance[expense.Type] + expense.Amount;
            }
        }

        foreach (ExpenseType type in balance.Keys)
        {
            if (balance[type] > 0)
            {
                labels.Add(EnumExtensions.GetDisplayName(type));
                values.Add(balance[type]);
                background.Add(type.ColorMap());
            }
        }

        _expenseData = new List<ITrace>
        {
            new Pie
            {
                Values = values,
                Labels = labels,
                //Marker = new Plotly.Blazor.Traces.PieLib.Marker(){ Colors = background }
            }
        };

        await Task.Run(() =>
        {
            _expenseChart.React();
        });

        _expensesLoaded = true;
    }
}

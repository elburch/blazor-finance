@page "/institutions"
@using BlazorFinance.Shared.Entities
@using BlazorFinance.Shared.Helpers
@using System.Net
@using System.Text
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h3>Institutions</h3>

<DataGrid TItem="Institution"
          Data="@_institutions"
          RowInserted="@OnRowInserted"
          RowUpdated="@OnRowUpdated"
          RowRemoving="@OnRowRemoving"
          RowRemoved="@OnRowRemoved"
          Editable="true"
          ShowPager="true"
          Responsive>
    <DataGridColumns>
         <DataGridCommandColumn>
             <NewCommandTemplate>
                 <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
             </NewCommandTemplate>
             <EditCommandTemplate>
                 <Button Color="Color.Warning" Clicked="@context.Clicked">Edit</Button>
             </EditCommandTemplate>
            <DeleteCommandTemplate>
                 <Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
            </DeleteCommandTemplate>
         </DataGridCommandColumn>
         <DataGridColumn Field="@nameof(Institution.Id)" Caption="#" Sortable="false" />
         <DataGridSelectColumn 
             Field="@nameof(Institution.Type)" 
             Caption="Type"  
             Data="Enum.GetValues(typeof(InstitutionType)).Cast<object>()" 
             ValueField="(x) => (InstitutionType)x"
             TextField="(x) => Enum.GetName(typeof(InstitutionType), (InstitutionType)x)"
             Editable
         >
         </DataGridSelectColumn>
         <DataGridColumn Field="@nameof(Institution.Name)" Caption="Name" Editable />
         <DataGridColumn Field="@nameof(Institution.SteetAddress)" Caption="Address" Editable />
         <DataGridColumn Field="@nameof(Institution.City)" Caption="City" Editable />
         <DataGridColumn Field="@nameof(Institution.State)" Caption="State" Editable />
         <DataGridColumn Field="@nameof(Institution.PostalNumber)" Caption="Zip" Editable />
         <DataGridColumn Field="@nameof(Institution.Website)" Caption="Website" Editable />
         <DataGridColumn Field="@nameof(Institution.PhoneNumber)" Caption="Phone" Editable />
    </DataGridColumns>
</DataGrid>

 @code {
    private List<Institution> _institutions = new List<Institution>();

    protected override async Task OnInitializedAsync()
    {
        _institutions = await Http.GetFromJsonAsync<List<Institution>>("institution/read") ?? new List<Institution>();
    }

    private async Task OnRowInserted(SavedRowItem<Institution, Dictionary<string, object>> e)
    {
        HttpResponseMessage? response = await Http.PostAsJsonAsync("institution/create", e.NewItem);

        if (response.IsSuccessStatusCode){
            Institution? institution = await response.Content.ReadFromJsonAsync<Institution>();
            if (institution != null){
                e.OldItem.Id = institution.Id;
            }

            ToastService.ShowToast(ToastLevel.Success, $"Institution Created: Id {institution?.Id}");
        }
        else
            ToastService.ShowToast(ToastLevel.Error, $"Institution Was Not Created. Response Code: {response.StatusCode}");
    }

    private async Task OnRowUpdated(SavedRowItem<Institution, Dictionary<string, object>> e)
    {
        HttpResponseMessage? response = await Http.PutAsJsonAsync($"institution/update/{e.NewItem.Id}", e.NewItem, 
            new JsonSerializerOptions { 
                DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull 
            }
        );

        if (response.IsSuccessStatusCode)
            ToastService.ShowToast(ToastLevel.Success, $"Institution Id {e.NewItem.Id} Updated");
        else
            ToastService.ShowToast(ToastLevel.Error, $"Institution Id {e.NewItem.Id} Was Not Updated. Response Code: {response.StatusCode}");
    }

    private async Task OnRowRemoving(CancellableRowChange<Institution> e)
    {
        var accounts = (await Http.GetFromJsonAsync<List<Account>>("account/read") ?? new List<Account>())
            .Where(t => t.InstitutionId == e.OldItem.Id)
            .ToList<Account>();

        var income = (await Http.GetFromJsonAsync<List<Income>>("income/read") ?? new List<Income>())
            .Where(t => t.Institution?.Id == e.OldItem.Id)
            .ToList<Income>();

        StringBuilder errors = new StringBuilder();

        if (accounts.Count > 0)
            errors.AppendLine("Cannot delete Institutions having related Income records");

        if (income.Count > 0)
            errors.AppendLine("Cannot delete Institutions having related Account records");

        if (errors.Length > 0)
            await JSRuntime.InvokeVoidAsync("alert", "Cannot delete Institutions having related Account records");

        e.Cancel = accounts.Count > 0 ?
            // Dialogs return true when confirming delete prompt, false when canceled (use negation to sync with args)
            true : !await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the Institution?");
    }

    private async Task OnRowRemoved(Institution institution)
    {
        HttpResponseMessage? response = await Http.DeleteAsync($"institution/delete/{institution.Id}");

        if (response.IsSuccessStatusCode)
            ToastService.ShowToast(ToastLevel.Success, $"Institution Id {institution.Id} Deleted");
        else
            ToastService.ShowToast(ToastLevel.Error, $"Institution Id {institution.Id} Was Not Deleted. Response Code: {response.StatusCode}");
    }
}
